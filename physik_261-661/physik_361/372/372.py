import numpy as np


def a():

    t3 = np.arange(10,190,10)

    U3 = np.array([.1,.2,.5,.6,.6,.8,.8,.7,.7,.8,.8,.7,.7,.8,.9,.8,.7,.8])+2

    DU = 0.1

    for i in range(len(t3)):
        print(t3[i],U3[i],DU)

def a2():

    t5 = np.arange(10,310,10)
    Dt5 = .5

    U5 = np.array([90.0,129.0,140.0,146.0,149.0,151.0,154.0,155.9,157.4,159.0,160.2,161.3,162.3,163.1,163.8,164.6,165.2,165.7,166.2,166.8,167.3,167.7,168.1,168.5,168.9,169.4,169.6,170.0,170.3,170.5])
    U5_norm = U5/U5.max()

    DU5 = .1
    DU5_norm = ((DU5/U5.max())**2 + (U5/U5.max()**2*DU5)**2)**2

    for i in range(len(t5)):
        print(t5[i],U5_norm[i],DU5_norm[i],Dt5)

def b():

    T = np.array([29,33,38,44,48,53,59,64,69,75])+273.15
    DT = 1

    T0 = 25+273.15
    DT0 = 1

    T4 = T**4-T0**4
    DT4 = ((4*T**3*DT)**2 + (4*T0**3*DT0)**2)**0.5

    U = np.array([[15.0,19.4,25.9,31.1,38.0,44.4,51.6,58.6,66.3,73.4],[4.7,7.0,7.0,8.0,9.6,10.7,12.9,13.8,15.9,16.9],[17.5,21.0,26.0,31.9,38.5,44.9,51.9,59.4,66.4,74.5],[4.5,6.0,4.7,5.5,6.5,6.6,8.2,8.7,10.5,11.1]])*1e-3-2.77e-3 # V
    DU_ohne = np.array([[.1,.1,.1,.1,.1,.1,.1,.1,.1,.1],[1,1,1,.1,.1,.1,.1,.1,.1,.1],[1,1,1,.1,.1,.1,.1,.1,.1,.1],[2,2,2,.1,.1,.1,.1,.1,.1,.1]])*1e-3 # V
    DU = ((DU_ohne)**2 + (0.03e-3)**2)**0.5

    V = 100
    S = 29e-6 # V mÂ² 1/W

    pf = U/(V*S)
    Dpf = DU/(V*S)

#    for i in range(U.shape[0]):
#        for j in range(U.shape[1]):
#            print(T4[j],pf[i][j],DT4[j],Dpf[i][j])

    for i in range(U.shape[0]):
        for j in range(U.shape[1]):
            print(np.round(T4[j],2),r'\pm',np.round(DT4[j],2),'&',np.round(pf[i][j],3),r'\pm',np.round(Dpf[i][j],3),r'\\')

#    PHI/F = 


def c():

    r = 880e-3-np.array([710,660,610,560,510,460,410,360,310,260])*1e-3
    Dr = 1e-3
    Dr_s = 1/r**3*Dr

    U = np.array([1790.0,840.0,495.0,319.7,215.6,152.7,111.9,85.3,66.4,53.0])*1e-3-2.77e-3
    DU_ohne = np.array([5,1,1,.1,.1,.1,.1,.1,.1,.1])*1e-3
    DU = ((DU_ohne)**2 + (0.03e-3)**2)**0.5

#    for i in range(len(r)):
#        print(r[i]**(-2),U[i],Dr_s[i],DU[i])

    for i in range(len(r)):
        print(np.round(r[i]**(-2),2),'\pm',np.round(Dr_s[i],2),'&',np.round(U[i],4),'\pm',np.round(DU[i],4),r'\\')

def c2():

    UH = np.array([12,10.6,8.8,7.1,5.7,4.4,3.2,2.2,1.2,0.5])
    I = np.array([4.34,4.02,3.63,3.20,2.81,2.41,2.00,1.61,1.21,.8])

    R = UH/I

    U = np.array([1080.0,1517.0,1160.0,833.0,585.0,401.0,240.0,130.0,60.0,29.0])
    DU = np.array([10,10,1,1,1,1,1,1,1,1])

    V = 100
    S = 29e-6

    pf = U/(V*S)
    Dpf = DU/(V*S)

    a = 4.82e-3
    b = 6.76e-7

    T0 = 25+273.15
    DT0 = 1

    R0 = 0.4
    DR0 = 0.1
    DR = 0

    T = (-1)*(a + np.sqrt(a**2 * R0 - 4 * b * R0 + 4 * b * R)/np.sqrt(R0) - 2 * b * T0)/(2 * b)
    Ts = -a/(2 * b) + T0 + (a**2 * 1/4 * 1/b**2 - 1/b + R * 1/R0 * 1/b)**0.5
    DTs = ((0.5*DR0*(a**2/(4*b**2)-1/b+R/(R0*b))**0.5*1/(R0*b))**2 + (DT0)**2)**0.5
    DTs = np.sqrt(DT0**2+(0.5*DR*1/(np.sqrt(a**2/(4*b**2)-1/b+R/(R0*b)))*1/(R0*b))**2+(0.5*DR*R/(R0**2*b)*1/(np.sqrt(a**2/(4*b**2)-1/b+R/(R0*b))))**2)
    for i in range(len(Ts)):
        print(np.log10(Ts[i]),np.log10(pf[i]),DTs[i]/Ts[i],Dpf[i]/pf[i])

c()
